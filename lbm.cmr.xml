<?xml version='1.0' encoding='UTF-8'?>
<cmr>
	<project>
		<name>LBM</name>
		<authors>
			<author mail='sebastien.valat@gmail.com'>Sébastien Valat</author>
		</authors>
		<version>1.0</version>
		<headers>
			<include>LBMStructs.h</include>
		</headers>
		<doc>
			Simulation Lattice Boltzman....
		</doc>
		<screen>./img.png</screen>
	</project>
	<elements>
		<!-- ********************* CONSTS **************** -->
		<consts>
			<const mathname='M^{dir}' longname='direction_matrix' dims='2' doc="Matrice associant un ID (ligne) à une direction spatiale 2D (colonne)." type="double">
					+0.0 &amp; +0.0 \\ 
					 1.0 &amp; +0.0 \\ 
					+0.0 &amp; +1.0 \\ 
					-1.0 &amp; +0.0 \\ 
					+0.0 &amp; -1.0 \\
					+1.0 &amp; +1.0 \\
					-1.0 &amp; +1.0 \\
					-1.0 &amp; -1.0 \\
					+1.0 &amp; -1.0
			</const>
			<const mathname='W' longname='equi_weight' dims='1' doc='Poids corrigeant les différences de normes de différentes directions dans une maille carrée.' type="double">
				\frac{4.0}{9.0} &amp; \frac{1.0}{9.0} &amp; \frac{1.0}{9.0} &amp; 
				\frac{1.0}{9.0} &amp; \frac{1.0}{9.0} &amp; \frac{1.0}{36.0}&amp; 
				\frac{1.0}{36.0}&amp; \frac{1.0}{36.0}&amp; \frac{1.0}{36.0}
			</const>
			<const mathname='o' longname='opposite_of' dims='1' doc="Definition de l'ID de la direction oposée dans la matrice $M^{dir}$." type="int">
				0 &amp; 3 &amp; 4 &amp; 1 &amp; 2 &amp; 7 &amp; 8 &amp; 5 &amp; 6
			</const>
			<!-- ***** -->
			<const mathname='O_R' longname='OBSTACLE_R' type="double">\mathrm{HEIGHT}/8.0</const>
			<const mathname='R' longname='REYNOLDS' type="double">300</const>
			<const mathname='V' longname='INFLOW_MAX_VELOCITY' type="double">0.1</const>
			<const mathname='K' longname='KINETIC_VISCOSITY' type='double'>\mathrm{(INFLOW_MAX_VELOCITY * 2.0 * OBSTACLE_R / REYNOLDS)}</const>
			<const mathname='r' longname='RELAX_PARAMETER' type="double">\mathrm{(1.0 / (3.0 * KINETIC_VISCOSITY + 1.0/2.0))}</const>
		</consts>
		<!-- ********************* MESH ****************** -->
		<mesh>
			<var mathname='f_{i,j,k}' longname='pdf' type='double' ghost='1' memory="CMRMemoryModelRowMajor" doc='Densité de particule dans différentes directions.'>
				<extradims>
					<extradim mathname='k' longname='direction' size='9' start='0' doc="Direction à l'interieur de la maille."/>
				</extradims>
			</var>
			<var mathname='T_{i,j}' longname='cell_type' type='LBMCellType'  memory="CMRMemoryModelRowMajor"   ghost='1' doc='Type de cellule.'/>
			<var mathname='F_{i,j}' longname='fileout'   type='LBMFileEntry'  memory="CMRMemoryModelColMajor" doc='Structure de stokage pour la sortie.'/>
		</mesh>
		<!-- ****************** ITERATORS **************** -->
		<iterators>
			<iterator mathname='k' longname='k' start='0' end='8' doc='Iterateur sur les 9 directions.'/>
			<iterator mathname='s' longname='s' start='0' end='1' doc='Iterateur sur les 2 dimensions spatiales.'/>
		</iterators>
		<!-- ***************** DEFINITIONS **************** -->
		<defs>
			<def mathname='d_{i,j}' longname='density' doc="Calcul de la densité macroscopique locale (somme des densités microscopiques).">
				<mathstep>d_{i,j}=\sum_{k}{f_{i,j,k}}</mathstep>
			</def>
			<def mathname='v_{i,j,l}' longname='celerity' doc="Vitesse (au sens vecteur) macroscopique de la maille (somme des vitesses pondérées par la densité et les poids ($W$)).">
				<defparameter mathname='l' longname='l' type='int' doc='Coordonnée spatiale (1 ou 2) considérée.'/>
				<mathstep>v_{i,j,l} = \frac{\sum_k{f_{i,j,k} M^{dir}_{k,l}}} {d_{i,j}}</mathstep>
			</def>
			<def mathname='v^2' longname='v2' doc='Norme au carrée de la vitesse macroscopique de la maille.'>
				<mathstep>v^2 = \sum_s{v_{i,j,s} * v_{i,j,s}}</mathstep>
			</def>
			<!--<def mathname='p' longname='p' doc='Norme de la quantité de mouvement macroscopique de la maille.'>
				<mathstep>p = \sum_s{M^{dir}_{k,s} * v_{i,j,s}}</mathstep>
			</def>-->
			<def mathname='f_{eq,i,j,k}' longname='pdf_eq' doc="Distribution des probabilité de présence à l'équilibre locale suivant la direction $k$.">
				<defparameter mathname='k' longname='k' type='int' doc='Direction considérée (1 à 9).'/>
				<declvar mathname='p' longname='p' type='double' default='0'/>
				<mathstep>p = \sum_s{M^{dir}_{k,s} * v_{i,j,s}}</mathstep>
 				<mathstep>f_{eq,i,j,k} = 1.0 + 3.0p + \frac{9.0}{2.0}p^2 - \frac{3.0}{2.0}v^2</mathstep> 
			</def>
			<def mathname='v_{pois,j}' longname='poiseuil' doc='Fonction de poiseuil pour une hauteur de fluide donnée.'>
<!-- 				<declvar mathname='y' longname='Y' type='int'/> -->
				<declvar mathname='L' longname='L' type='double'/>
				<declvar mathname='H' longname='H' type='double' default='100'/>
<!-- 				<mathstep>y = j - 1</mathstep> -->
				<mathstep>L = H - 1</mathstep>
				<mathstep>v_{pois,j} = \frac{4V}{L^2} (Lj - j^2)</mathstep>
			</def>
			<def mathname='v_{i,j}' longname='vmacro' doc="Norme de la vitesse macroscopique de la cellule.">
				<mathstep>v_{i,j} = \sqrt{v^2}</mathstep>
			</def>
		</defs>
		<!-- *************** CELLACTION *************-** -->
		<cellactions>
			<cellaction name='bounce_back' loop='CMRMeshOperationSimpleLoopWithPos' doc='Applique une réflexion des densités microscopiques comme un mirroir.'>
				<foreach iterator='k'>
					<mathstep>f_{i,j,k} = f_{i,j,o_k}</mathstep>
				</foreach>
			</cellaction>
			<cellaction name='zou_he_poiseuil'  loop='CMRMeshOperationSimpleLoopWithPos' doc='Applique des conditions de Zou He en considérant un profile de poiseuil ver la droite (fluide entrant par la gauche).'>
				<alias mathname="L_k">f_{i,j,k}</alias>
				<declvar mathname='d' longname='d' type='double' default='0' doc='Densité moyenne locale.'/>
				<declvar mathname='v' longname='v' type='double' default='0' doc='Vistesse moyenne locale.'/>
				<mathstep>v = v_{pois,j}</mathstep>
				<mathstep>d = \frac{L_0 + L_2 + L_4 + 2 (L_3 + L_6 + L_7)}{1-v}</mathstep>
				<mathstep>f_{i,j,1} = L_3</mathstep>
				<mathstep>f_{i,j,5} = L_7-\frac{1}{2}(L_2 - L_4) + \frac{1}{6}(dv)</mathstep>
				<mathstep>f_{i,j,8} = L_6 + \frac{1}{2}(L_2 - L_4) + \frac{1}{6}(dv)</mathstep>
			</cellaction>
			<cellaction name='zou_he_const_dentity'  loop='CMRMeshOperationSimpleLoopWithPos' doc='Applique des conditions de Zou He en considérant une densité constante (fluide sortant par la droite).'>
				<alias mathname="L_k">f_{i,j,k}</alias>
				<declvar mathname='d' longname='d' type='double' default='0' doc='Densité moyenne locale.'/>
				<declvar mathname='v' longname='v' type='double' default='0' doc='Vistesse moyenne locale.'/>
				<mathstep>v = -1 + \frac{1}{d} (L_0+L_2+L_4+2(L_1+L_5+L_8))</mathstep>
				<mathstep>f_{i,j,3} = L_1 - \frac{2}{3} dv</mathstep>
				<mathstep>f_{i,j,7} = L_5 - \frac{1}{2} (L_2 - L_4) + \frac{1}{6} dv</mathstep>
				<mathstep>f_{i,j,6} = L_8 + \frac{1}{2} (L_2 - L_4) + \frac{1}{6} dv</mathstep>
			</cellaction>
			<cellaction name='simple_copy'  loop='CMRMeshOperationSimpleLoopWithPos' doc='Simple copie des anciennes valeurs.'>
				<foreach iterator='k'>
					<mathstep>f_{i,j,k} = f_{i,j,k}</mathstep>
				</foreach>
			</cellaction>
			<cellaction name='SpecialCells'  loop='CMRMeshOperationSimpleLoopWithPos' doc='Applique les opérations en fonction du type de cellule.'>
				<ccode>switch($T_{i,j}$)                             </ccode>
				<ccode>{                                             </ccode>
				<ccode>	case CELL_FLUID:                             </ccode>
				<ccode>		$\cmrsubaction{simple_copy}$;            </ccode>
				<ccode>		break;                                   </ccode>
				<ccode>	case CELL_BOUNCE_BACK:                       </ccode>
				<ccode>		$\cmrsubaction{simple_copy}$;            </ccode>
				<ccode>		$\cmrsubaction{bounce\_back}$;           </ccode>
				<ccode>		break;                                   </ccode>
				<ccode>	case CELL_LEFT_IN:                           </ccode>
				<ccode>		$\cmrsubaction{zou\_he\_poiseuil}$;      </ccode>
				<ccode>		break;                                   </ccode>
				<ccode>	case CELL_RIGHT_OUT:                         </ccode>
				<ccode>		$\cmrsubaction{zou\_he\_const_dentity}$; </ccode>
				<ccode>		break;                                   </ccode>
				<ccode>}                                             </ccode>
				<!--<switch select='T_{i,j}'>
					<case select='CELL_FLUID'></case>
					<case select='CELL_BOUNCE_BACK'><callsubaction name='bounce_back'/></case>
					<case select='CELL_LEFT_IN'><callsubaction name='zou_he_poiseuil'/></case>
					<case select='CELL_RIGHT_OUT'><callsubaction name='zou_he_const_dentity'/></case>
				</switch>-->
			</cellaction>
			<cellaction name='Propagation'  loop='CMRMeshOperationSimpleLoop' doc='Propage les densité microscopiques entre cellule (copie vers la cellule locale).'>
				<declvar mathname='I' longname='I' type='int'/>
				<declvar mathname='J' longname='J' type='int'/>
				<!--<alias mathname="x^8" captureall="false" capturename="true">x*x*x*x*x*x*x</alias>-->
				<foreach iterator='k'>
					<mathstep>I = i - M^{dir}_{k,0}</mathstep>
					<mathstep>J = j - M^{dir}_{k,1}</mathstep>
					<mathstep>f_{i,j,k} = f_{I,J,k}</mathstep>
					<!--<mathstep>f_{i,j,k} = I^8</mathstep>-->
				</foreach>
			</cellaction>
			<cellaction name='Collision'  loop='CMRMeshOperationSimpleLoop' doc='Applique les équation de collision pour re-répartir les densités microscopiques.'>
				<foreach iterator='k'>
					<mathstep>f_{i,j,k} = f_{i,j,k} - r * (f_{i,j,k} - f_{eq,i,j,k})</mathstep>
				</foreach>
			</cellaction>
			<cellaction name='InitCellType' loop='CMRMeshOperationSimpleLoopInPlace' doc='Initialise le contenue des types de cellule.'>
				<defparameter mathname='t' longname='cellType' type='LBMCellType' doc="Definit le type a affecter à l'ensemble des cellules retenues."/>
				<mathstep>T_{i,j} = t</mathstep>
			</cellaction>
			<cellaction name='InitStatePoiseuil' loop='CMRMeshOperationSimpleLoopInPlace' doc="Initialise le contenu des cellules avec un profile de poinseuil à l'équilibre allant vers la droite.">
				<declvar mathname='p' longname='p' type='double' default='0'/>
				<foreach iterator='k'>
					<mathstep>p = M^{dir}_{k,0} * v_{pois,j}</mathstep>
					<mathstep>f_{i,j,k} = 1.0 + 3.0p + \frac{9.0}{2.0}p^2 - \frac{3.0}{2.0}v_{pois,j}^2</mathstep> 
				</foreach>
<!-- 				<ccode>printf("\%d , \%d ; \%g == \%g ; \%g , \%g\n",$i$,$j$,$v_{pois,j}$,$v_{i,j}$,$p$,$f_{i,j,8}$);</ccode> -->
			</cellaction>
			<cellaction name='SetupObstable' loop='CMRMeshOperationSimpleLoopInPlaceWithPos' doc="Configure les cellules de l'obstable.">
				<defparameter mathname="O_x" longname="obstacle_x" type='double'/>
				<defparameter mathname="O_y" longname="obstacle_y" type='double'/>
				<ccode>if ( ( $(x-O_x)*(x-O_x)$ + $(j-O_y)*(j-O_y)$ ) &lt;= $(O_R)*(O_R)$ ) {</ccode>
				<ccode>	*cell.cell_type(x,y) = CELL_BOUNCE_BACK;</ccode><!-- TODO : work on this -->
				<ccode>	*cell.pdf(x,y)[0] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[1] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[2] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[3] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[4] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[5] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[6] = 1.0;</ccode>
				<ccode>	*cell.pdf(x,y)[7] = 1.0;</ccode>
				<ccode>printf("ok\n");</ccode>
				<ccode>}</ccode>
			</cellaction>
		</cellactions>
		<init>
			<callaction name="InitStatePoiseuil">
				<zone>local.expend(1)</zone>
			</callaction>
			<callaction name="InitCellType">
				<parameter mathname='cellType'>CELL_FLUID</parameter>
				<zone>global.expended(1)</zone>
			</callaction>
			<callaction name="InitCellType">
				<parameter mathname='cellType'>CELL_LEFT_IN</parameter>
				<zone>global.expended(1).getBorder(CMR_RIGHT)</zone>
			</callaction>
			<callaction name="InitCellType">
				<parameter mathname='cellType'>CELL_RIGHT_OUT</parameter>
				<zone>global.expended(1).getBorder(CMR_RIGHT)</zone>
			</callaction>
			<callaction name="InitCellType">
				<parameter mathname='cellType'>CELL_BOUNCE_BACK</parameter>
				<zone>global.expended(1).getBorder(CMR_TOP)</zone>
				<zone>global.expended(1).getBorder(CMR_BOTTOM)</zone>
			</callaction>
			<callaction name="SetupObstable">
				<parameter mathname="obstacle_x">WIDTH/10.0</parameter>
				<parameter mathname="obstacle_y">HEIGHT/2.0+3.0</parameter>
				<zone>global</zone>
			</callaction>
		</init>
		<mainloop>
			<!-- ************* -->
			<callaction name="SpecialCells">
				<zone>local.expended(1)</zone>
			</callaction>
			<!-- ************* -->
			<callaction name="Collision">
				<zone>local</zone>
			</callaction>
			
			<!-- ************* -->
			<callaction name="Propagation">
				<zone>local.expended(-1)</zone>
			</callaction>
		</mainloop>
		<output>
			<entry name="v"      type="float">v_{i,j}</entry>
			<entry name="density" type="float">d_{i,j}</entry>
		</output>
	</elements>
</cmr>

<!--

-->
